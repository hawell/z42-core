openapi: '3.0.3'

info:
  title: 'Zone42 API'
  description: 'Zone42 administrator api'
  version: '1.0'

servers:
  - url: https://api.zone-42.com

security:
  - bearerAuth: []

paths:
  /zones:
    get:
      summary: 'list of all zones'
      parameters:
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/ascending'
        - $ref: '#/components/parameters/q'
      responses:
        200:
          $ref: '#/components/responses/list_response'
        400:
          $ref: '#/components/responses/error_response'

    post:
      summary: 'create a new zone'
      requestBody:
        $ref: '#/components/requestBodies/new_zone'
      responses:
        201:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        409:
          $ref: '#/components/responses/error_response'

  /zones/{zone}:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
    get:
      summary: 'get zone data'
      responses:
        200:
          description: 'successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zone'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    put:
      summary: 'update zone data'
      requestBody:
        $ref: '#/components/requestBodies/update_zone'
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    delete:
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

  /zones/{zone}/import:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
    post:
      summary: 'import zone data'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

  /zones/{zone}/export:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
    get:
      summary: 'export zone data'
      responses:
        200:
          description: 'successful response'
          content:
            text/plain:
              schema:
                type: string
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

  /zones/{zone}/locations:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string

    get:
      summary: 'list of all locations within zone'
      parameters:
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/ascending'
        - $ref: '#/components/parameters/q'
      responses:
        200:
          $ref: '#/components/responses/list_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    post:
      summary: 'create a new location in zone'
      requestBody:
        $ref: '#/components/requestBodies/new_location'
      responses:
        201:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        409:
          $ref: '#/components/responses/error_response'

  /zones/{zone}/locations/{location}:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
      - name: location
        in: path
        required: true
        schema:
          type: string

    get:
      summary: 'get location of a zone'
      responses:
        200:
          description: 'successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    put:
      summary: 'update a location in zone'
      requestBody:
        $ref: '#/components/requestBodies/update_location'
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    delete:
      summary: 'remove a location from zone'
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

  /zones/{zone}/locations/{location}/rrsets:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
      - name: location
        in: path
        required: true
        schema:
          type: string

    get:
      summary: 'list of all rrsets within location'
      responses:
        200:
          $ref: '#/components/responses/list_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    post:
      summary: 'create a new rrset in location'
      requestBody:
        $ref: '#/components/requestBodies/new_rrset'
      responses:
        201:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        409:
          $ref: '#/components/responses/error_response'

  /zones/{zone}/locations/{location}/rrsets/{rtype}:
    parameters:
      - name: zone
        in: path
        required: true
        schema:
          type: string
      - name: location
        in: path
        required: true
        schema:
          type: string
      - name: rtype
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/rtype'

    get:
      summary: 'get rrset of a zone'
      responses:
        200:
          description: 'successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rrset'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    put:
      summary: 'update a rrset in location'
      requestBody:
        $ref: '#/components/requestBodies/update_rrset'
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    delete:
      summary: 'remove a rrset from location'
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

  /auth/signup:
    post:
      summary: 'create a new user'
      security: []
      requestBody:
        $ref: '#/components/requestBodies/new_user'
      responses:
        201:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        409:
          $ref: '#/components/responses/error_response'

  /auth/verify:
    post:
      summary: 'verify a request'
      security: []
      parameters:
        - name: code
          in: query
          description: 'verification code'
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'

  /auth/login:
    post:
      summary: 'login user'
      security: []
      requestBody:
        $ref: '#/components/requestBodies/user'
      responses:
        200:
          description: 'successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth'
        401:
          $ref: '#/components/responses/error_response'

  /auth/logout:
    post:
      summary: 'logout user'
      responses:
        200:
          $ref: '#/components/responses/success_response'

  /auth/refresh_token:
    get:
      summary: 'refresh auth token'
      responses:
        200:
          description: 'successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth'
        401:
          $ref: '#/components/responses/error_response'

  /auth/recover:
    post:
      summary: 'request password recovery'
      requestBody:
        $ref: '#/components/requestBodies/recovery_request'
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'

  /auth/reset:
    patch:
      summary: 'reset password'
      requestBody:
        $ref: '#/components/requestBodies/reset_request'
      responses:
        202:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'

  /auth/api_keys:
    get:
      summary: 'list of all api keys'
      responses:
        200:
          $ref: '#/components/responses/api_keys_response'
        400:
          $ref: '#/components/responses/error_response'

    post:
      summary: 'create a new api key'
      requestBody:
        $ref: '#/components/requestBodies/new_api_key'
      responses:
        201:
          $ref: '#/components/responses/new_api_key_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        409:
          $ref: '#/components/responses/error_response'

  /auth/api_keys/{key}:
    parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
    get:
      summary: 'get api key data'
      responses:
        200:
          description: 'successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_key'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    put:
      summary: 'update api-key data'
      requestBody:
        $ref: '#/components/requestBodies/update_api_key'
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

    delete:
      responses:
        200:
          $ref: '#/components/responses/success_response'
        400:
          $ref: '#/components/responses/error_response'
        401:
          $ref: '#/components/responses/error_response'
        404:
          $ref: '#/components/responses/error_response'

components:
  parameters:
    start:
      name: start
      in: query
      description: 'start index'
      required: false
      schema:
        type: integer
    count:
      name: count
      in: query
      description: 'number of items in response'
      required: false
      schema:
        type: integer
    ascending:
      name: ascending
      in: query
      description: 'ascending order'
      required: false
      schema:
        type: boolean
    q:
      name: q
      in: query
      description: 'search query'
      required: false
      schema:
        type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  requestBodies:
    new_zone:
      description: 'zone'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/new_zone'

    update_zone:
      description: 'zone'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_zone'

    new_location:
      description: 'new location'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/new_location'

    update_location:
      description: 'update location'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_location'

    new_rrset:
      description: new rrset
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/new_rrset'

    update_rrset:
      description: update rrset
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_rrset'

    new_user:
      description: new user
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string

    user:
      description: new user
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string

    recovery_request:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string

    reset_request:
      content:
        application/json:
          schema:
            type: object
            properties:
              password:
                type: string
                description: 'new password'
              code:
                type: string
                description: 'verification code'

    new_api_key:
      description: 'api-key'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/api_key'

    update_api_key:
      description: 'update api-key'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/update_api_key'

  responses:
    list_response:
      description: 'list response'
      content:
        application/json:
          schema:
            title: list response
            type: object
            properties:
              total:
                type: integer
              items:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    enabled:
                      type: boolean

    new_api_key_response:
      description: 'created api-key'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/new_api_key_response'

    api_keys_response:
      description: 'list of api-keys'
      content:
        application/json:
          schema:
            title: 'list of keys'
            type: array
            items:
              $ref: '#/components/schemas/api_key'

    error_response:
      description: 'error response'
      content:
        application/json:
          schema:
            title: error response
            type: object
            properties:
              code:
                type: integer
              message:
                type: string

    success_response:
      description: 'successful response'
      content:
        application/json:
          schema:
            title: successful response
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              "data":
                type: object

  schemas:
    user:
      title: user
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example: '{"email":"user1@example.com", "password": "pwd123"}'

    auth:
      title: auth response
      type: object
      properties:
        code:
          type: integer
        token:
          type: string
        expire:
          type: string
      example: '{"code": 200, "token":"abcdefg123", "expire":"2006-01-02T15:04:05Z07:00"}'

    new_zone:
      title: new zone
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
        dnssec:
          type: boolean
        cname_flattening:
          type: boolean
      example: '{"name": "example.com.", "enabled": true, "dnssec":false, "cname_flattening": false}'

    update_zone:
      title: update zone
      type: object
      properties:
        enabled:
          type: boolean
        dnssec:
          type: boolean
        cname_flattening:
          type: boolean
        soa:
          $ref: '#/components/schemas/soa'
      example: '{"enabled": true, "dnssec":true, "cname_flattening": false, "soa":{"ttl": 300, "ns": "ns1.example.com.", "mbox": "admin.example.com.", "refresh": 44, "retry": 55, "expire": 66, "minttl": 100}}'

    zone:
      title: zone
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
        dnssec:
          type: boolean
        cname_flattening:
          type: boolean
        soa:
          $ref: '#/components/schemas/soa'
      example: '{"name": "example.com.", "enabled": true, "dnssec":true, "cname_flattening": false, "soa":{"ttl": 300, "ns": "ns1.example.com.", "mbox": "admin.example.com.", "refresh": 44, "retry": 55, "expire": 66, "minttl": 100}}'

    new_location:
      title: new location
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
      example: '{"name": "www", "enabled": true}'

    update_location:
      title: update location
      type: object
      properties:
        enabled:
          type: boolean
      example: '{"enabled": true}'

    location:
      title: location
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
      example: '{"name": "www", "enabled": true}'

    new_rrset:
      title: new rrset
      type: object
      properties:
        type:
          $ref: '#/components/schemas/rtype'
        value:
          anyOf:
            - $ref: '#/components/schemas/a'
            - $ref: '#/components/schemas/aaaa'
            - $ref: '#/components/schemas/cname'
            - $ref: '#/components/schemas/txt'
            - $ref: '#/components/schemas/ns'
            - $ref: '#/components/schemas/mx'
            - $ref: '#/components/schemas/srv'
            - $ref: '#/components/schemas/caa'
            - $ref: '#/components/schemas/ptr'
            - $ref: '#/components/schemas/tlsa'
            - $ref: '#/components/schemas/ds'
            - $ref: '#/components/schemas/aname'
        enabled:
          type: boolean

    update_rrset:
      title: update rrset
      type: object
      properties:
        value:
          anyOf:
            - $ref: '#/components/schemas/a'
            - $ref: '#/components/schemas/aaaa'
            - $ref: '#/components/schemas/cname'
            - $ref: '#/components/schemas/txt'
            - $ref: '#/components/schemas/ns'
            - $ref: '#/components/schemas/mx'
            - $ref: '#/components/schemas/srv'
            - $ref: '#/components/schemas/caa'
            - $ref: '#/components/schemas/ptr'
            - $ref: '#/components/schemas/tlsa'
            - $ref: '#/components/schemas/ds'
            - $ref: '#/components/schemas/aname'
        enabled:
          type: boolean

    rrset:
      title: rrset
      type: object
      properties:
        value:
          anyOf:
            - $ref: '#/components/schemas/a'
            - $ref: '#/components/schemas/aaaa'
            - $ref: '#/components/schemas/cname'
            - $ref: '#/components/schemas/txt'
            - $ref: '#/components/schemas/ns'
            - $ref: '#/components/schemas/mx'
            - $ref: '#/components/schemas/srv'
            - $ref: '#/components/schemas/caa'
            - $ref: '#/components/schemas/ptr'
            - $ref: '#/components/schemas/tlsa'
            - $ref: '#/components/schemas/ds'
            - $ref: '#/components/schemas/aname'
        enabled:
          type: boolean

    rtype:
      type: string
      enum: [a, aaaa, cname, txt, ns, mx srv, caa, ptr, tlsa, ds, aname]

    soa:
      title: soa
      properties:
        ns:
          type: string
        mbox:
          type: string
        refresh:
          type: integer
        retry:
          type: integer
        expire:
          type: integer
        minttl:
          type: integer
        serial:
          type: integer

    a:
      title: a
      allOf:
        - $ref: '#/components/schemas/ip'

    aaaa:
      title: aaaa
      allOf:
        - $ref: '#/components/schemas/ip'

    ip:
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        filter:
          type: object
          title: filter
          properties:
            count:
              type: string
              enum: [multi, single]
              default: multi
            order:
              type: string
              enum: [weighted, rr, none]
              default: none
            geo_filter:
              type: string
              enum: [country, location, asn, asn+country, none]
              default: none
        health_check:
          type: object
          title: health_check
          properties:
            protocol:
              type: string
              enum: [http, https, ping]
              default: http
            uri:
              type: string
              default: /
            port:
              type: integer
              default: 80
            timeout:
              type: integer
              default: 1000
            up_count:
              type: integer
              default: 3
            down_count:
              type: integer
              default: -3
            enable:
              type: boolean
              default: false
        records:
          title: records
          type: array
          items:
            type: object
            required:
              - ip
            properties:
              weight:
                type: integer
                default: 0
              ip:
                type: string
              country:
                type: array
                items:
                  type: string
                  default: ''
              asn:
                type: array
                items:
                  type: integer
                  default: 0

    cname:
      title: cname
      type: object
      required:
        - host
      properties:
        ttl:
          type: integer
          default: 300
        host:
          type: string

    txt:
      title: txt
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          uniqueItems: false
          items:
            type: object
            properties:
              text:
                type: string

    ns:
      title: ns
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          uniqueItems: true
          items:
            type: object
            properties:
              host:
                type: string

    mx:
      title: mx
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          items:
            type: object
            required:
              - host
              - preference
            properties:
              host:
                type: string
              preference:
                type: string

    srv:
      title: srv
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          items:
            type: object
            required:
              - target
              - priority
              - weight
              - port
            properties:
              target:
                type: string
              priority:
                type: integer
              weight:
                type: integer
              port:
                type: integer

    caa:
      title: caa
      type: object
      required:
        - tag
        - value
        - flag
      properties:
        ttl:
          type: integer
          default: 300
        tag:
          type: string
        value:
          type: string
        flag:
          type: integer

    ptr:
      title: ptr
      type: object
      required:
        - domain
      properties:
        ttl:
          type: integer
          default: 300
        domain:
          type: string

    tlsa:
      title: tlsa
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          items:
            type: object
            required:
              - usage
              - selector
              - matching_type
              - certificate
            properties:
              usage:
                type: integer
              selector:
                type: integer
              matching_type:
                type: integer
              certificate:
                type: string

    ds:
      title: ds
      type: object
      required:
        - records
      properties:
        ttl:
          type: integer
          default: 300
        records:
          type: array
          title: records
          items:
            type: object
            required:
              - key_tag
              - algorithm
              - digest_type
              - digest
            properties:
              key_tag:
                type: integer
              algorithm:
                type: integer
              digest_type:
                type: integer
              digest:
                type: string

    aname:
      title: aname
      type: object
      required:
        - location
      properties:
        ttl:
          type: integer
          default: 300
        location:
          type: string

    new_api_key_response:
      title: new api-key
      type: object
      properties:
        name:
          type: string
        key:
          type: string
        zone_name:
          type: string
        scope:
          type: string
          enum: ['acme']
        enabled:
          type: boolean

    api_key:
      title: api-key
      type: object
      properties:
        name:
          type: string
          required: true
        zone_name:
          type: string
          required: true
        scope:
          type: string
          required: true
          enum: ['acme']
        enabled:
          type: boolean

    update_api_key:
      title: update-api-key
      type: object
      properties:
        scope:
          type: string
          required: true
          enum: ['acme']
        enabled:
          type: boolean
